head	1.11;
access;
symbols;
locks
	aki:1.11; strict;
comment	@# @;


1.11
date	2009.03.18.09.32.28;	author aki;	state Exp;
branches;
next	1.10;

1.10
date	2009.03.18.09.12.17;	author aki;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.18.09.07.02;	author aki;	state Exp;
branches;
next	1.8;

1.8
date	2009.03.18.09.04.43;	author aki;	state Exp;
branches;
next	1.7;

1.7
date	2009.03.18.09.01.53;	author aki;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.18.08.57.48;	author aki;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.18.08.55.12;	author aki;	state Exp;
branches;
next	1.4;

1.4
date	2009.03.18.08.53.46;	author aki;	state Exp;
branches;
next	1.3;

1.3
date	2009.03.18.08.40.08;	author aki;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.18.08.27.08;	author aki;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.18.08.17.52;	author aki;	state Exp;
branches;
next	;


desc
@@


1.11
log
@*** empty log message ***
@
text
@
(def bits 
	((fn (p t)
		((fn (f x)
			((fn (r a)
				((fn (e)
					(p f (e (a (p f (p f x))))))
		((fn (e s) (e e s))
			(fn (e s)
				(s t t
					(p f (e e (s f)))
					(p t (e e (r (s t f) s f))))))))

		
	(fn (c l)
		((fn (w) (w w l x))
			(fn (w l n)
				(n t
					(p x (w w (l f) c))
					(p (l t) (w w (l f) (n f)))))))

	(fn (l)
		((fn (n) (n n l))
			(fn (n l) (p l (n n (p f l))))))
		))
		(t (fn (x) x))
		(fn (a) t)
		))
	(fn (a b c) (c a b))
	(fn (a b) a)))

(def (conv s) (cons (s (fn (a b) a) 1 0) (conv (s (fn (a b) b)))))
(take (conv bits) (* 50 50))

(list 0 1 1 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 0 0)

@


1.10
log
@*** empty log message ***
@
text
@d3 1
a3 1
	((fn (pair t)
d5 5
a9 5
			((fn (filter nums)
				((fn (sieve)
					(pair f (sieve (nums (pair f (pair f x))))))
		((fn (sieve s) (sieve sieve s))
			(fn (sieve s)
d11 2
a12 2
					(pair f (sieve sieve (s f)))
					(pair t (sieve sieve (filter (s t f) s f))))))))
d15 3
a17 3
	(fn (len l)
		((fn (walk) (walk walk l x))
			(fn (walk l n)
d19 2
a20 2
					(pair x (walk walk (l f) len))
					(pair (l t) (walk walk (l f) (n f)))))))
d24 1
a24 1
			(fn (n l) (pair l (n n (pair f l))))))
d33 1
a33 1
(take (conv bits) 51)
@


1.9
log
@*** empty log message ***
@
text
@a1 24
(def (pair a b c) (c a b))
(def (t a b) a)
(def f (t (fn (x) x)))
(def (x a) t)

(def (filter len l)
	(def walk 
		(fn (walk l n)
			(n t
				(pair x (walk walk (l f) len))
				(pair (l t) (walk walk (l f) (n f))))))
	(walk walk l x))

(def (nums l)
	((fn (n) (n n l))
		(fn (n l) (pair l (n n (pair f l))))))

(def sieve
	((fn (sieve s) (sieve sieve s))
		(fn (sieve s)
			(s t t
				(pair f (sieve sieve (s f)))
				(pair t (sieve sieve (filter (s t f) s f)))))))

d3 28
a30 1
	(pair f (sieve (nums (pair f (pair f x))))))
d32 1
a32 1
(def (conv s) (cons (s t 1 0) (conv (s f))))
@


1.8
log
@*** empty log message ***
@
text
@d5 1
a5 3

(def (drop l)
	(pair t (cdr l)))
d11 1
a11 1
				(pair (drop (l t)) (walk walk (l f) len))
d13 1
a13 1
	(walk walk l (fn (x) t)))
d27 1
a27 1
	(pair f (sieve (nums (pair f (pair f (fn (x) t)))))))
@


1.7
log
@*** empty log message ***
@
text
@d25 2
a26 2
				(cons 0 (sieve sieve (s f)))
				(cons 1 (sieve sieve (filter (s t f) s f)))))))
d29 1
a29 1
	(cons 0 (sieve (nums (pair f (pair f (fn (x) t)))))))
d31 2
a32 1
(take bits 51)
@


1.6
log
@*** empty log message ***
@
text
@d28 4
a31 1
(cons 0 (take (sieve (nums (pair f (pair f (fn (x) t))))) 50))
@


1.5
log
@*** empty log message ***
@
text
@d4 1
a4 1
(def (f a b) b)
d7 1
a7 1
	(cons t (cdr l)))
d12 1
a12 1
			((car n) 
d14 2
a15 2
				(pair (l t) (walk walk (l f) (cdr n))))))
	(walk walk l (list t)))
d19 1
a19 1
		(fn (n l) (pair l (n n (cons f l))))))
d24 1
a24 1
			((car (s t))
d26 1
a26 1
				(cons 1 (sieve sieve (filter (cdr (s t)) s f)))))))
d28 1
a28 1
(cons 0 (take (sieve (nums (list f f t))) 50))
@


1.4
log
@*** empty log message ***
@
text
@d7 1
a7 1
	(cons 1 (cdr l)))
d12 1
a12 1
			(if (= (car n) 1)
d15 1
a15 1
	(walk walk l (list 1)))
d19 1
a19 1
		(fn (n l) (pair l (n n (cons 0 l))))))
d24 3
a26 3
			(if (= (car (s t)) 0)
				(cons 1 (sieve sieve (filter (cdr (s t)) s f)))
				(cons 0 (sieve sieve (s f)))))))
d28 1
a28 1
(cons 0 (take (sieve (nums (list 0 0 1))) 50))
@


1.3
log
@*** empty log message ***
@
text
@d12 1
a12 1
			(if (null? n)
d15 1
a15 1
	(walk walk l ()))
d17 2
a18 2
(def nums 
	((fn (n l) (n n (list 0 0)))
d28 1
a28 1
(cons 0 (take (sieve (nums (list 0 0))) 50))
@


1.2
log
@*** empty log message ***
@
text
@d2 4
d13 2
a14 2
				(cons (drop (car l)) (walk walk (cdr l) len))
				(cons (car l) (walk walk (cdr l) (cdr n))))))
d19 1
a19 1
		(fn (n l) (cons l (n n (cons 0 l))))))
d24 3
a26 3
			(if (= (car (car s)) 0)
				(cons 1 (cdr (sieve sieve (filter (cdr (car s)) s))))
				(cons 0 (sieve sieve (cdr s)))))))
d29 1
@


1.1
log
@Initial revision
@
text
@d6 6
a11 5
	(def (walk l n)
		(if (null? n)
			(cons (drop (car l)) (walk (cdr l) (cdr len)))
			(cons (car l) (walk (cdr l) (cdr n)))))
	(walk l ()))
d13 3
a15 3
(def (nums n)
	(cons n
		(nums (cons 0 n))))
d17 6
a22 6
(def (sieve s)
	(if (= (car (car s)) 0)
		(cons 1
			(cdr (sieve (filter (car s) s))))
		(cons 0
			(sieve (cdr s)))))
d24 2
a25 3
(cons 0 (take (sieve (nums (list 0 0))) 10000))

;(take (filter (list 0 0) (nums (list 0 0))) 10)
@
